[{"path":"https://labeofd.github.io/SNPutils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 SNPutils authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"introduction-to-SNPutils","text":"SNPutils R package designed convert numerical genotype data (0, 1, 2) allele pairs. package provides tools : Converting genotype codes actual allele pairs Converting numeric genotype codes character labels Validating allele assignments according standard genetic rules Generating standardized output formats (TYP COM) Handling indels (insertions/deletions) correctly Performing quality control checks genotype data","code":""},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"introduction-to-SNPutils","text":"can install SNPutils GitHub:","code":"# install.packages(\"remotes\") remotes::install_github(\"LabeoFD/SNPutils\")"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"basic-concepts","dir":"Articles","previous_headings":"","what":"Basic Concepts","title":"introduction-to-SNPutils","text":"genetic data processing, genotypes often represented numerical codes: -1: Failed genotype call (NoCall) 0: Homozygous first allele (/) 1: Heterozygous (/B) 2: Homozygous second allele (B/B) codes convenient computation. SNPutils converts codes either: Biologically meaningful allele pairs using annotation data Human-readable character labels quality control reporting","code":""},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"example-data","dir":"Articles","previous_headings":"","what":"Example Data","title":"introduction-to-SNPutils","text":"SNPutils comes example datasets demonstrate functionality: genotype data contains: probeset_id column SNP identifiers Columns sample (Sample1, Sample2, Sample3) genotype codes (0, 1, 2)","code":"library(SNPutils)  # Load the example data data(example_genotypes) data(example_annotations)  # Examine the genotype data head(example_genotypes) #>   probeset_id Sample1 Sample2 Sample3 #> 1        SNP1       0       2       2 #> 2        SNP2       0       1       1 #> 3        SNP3       1       1       0 #> 4        SNP4       1       0       2 #> 5        SNP5       2       0       0 #> 6        SNP6       1       1       2"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"examine-the-annotation-data","dir":"Articles","previous_headings":"","what":"Examine the annotation data","title":"introduction-to-SNPutils","text":"annotation data contains: Probe.Set.ID column matching probeset_id values Chromosome position information Allele.Allele.B columns specifying nucleotides example data contains standard SNPs indels. indels, Allele.column contains deletion marker (“-”) Allele.B contains insertion sequence.","code":"head(example_annotations) #>   Probe.Set.ID Chromosome Physical.Position Allele.A Allele.B #> 1         SNP1          9          35958693        T        G #> 2         SNP2         11          61564642        A        C #> 3         SNP3         19          99793111        A        C #> 4         SNP4         14          22319761        T        G #> 5         SNP5         16          41066538        A        G #> 6         SNP6         13          20182616        T        C"},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"recoding-genotype-data","dir":"Articles","previous_headings":"","what":"Recoding genotype data","title":"introduction-to-SNPutils","text":"recode_genotypes() function converts numeric call codes corresponding genotype call codes, making data readable interpretable.","code":""},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"genotype-coding-system","dir":"Articles","previous_headings":"","what":"Genotype Coding System","title":"introduction-to-SNPutils","text":"function uses standard genotype coding: -1 → “NoCall” (missing genotype call) 0 → “AA” (homozygous allele ) 1 → “AB” (heterozygous) 2 → “BB” (homozygous allele B)","code":"# Convert numeric codes to genotype recoded_data <- recode_genotypes(example_genotypes)  print(\"Recoded genotype data:\") #> [1] \"Recoded genotype data:\" head(recoded_data) #>   probeset_id Sample1 Sample2 Sample3 #> 1        SNP1      AA      BB      BB #> 2        SNP2      AA      AB      AB #> 3        SNP3      AB      AB      AA #> 4        SNP4      AB      AA      BB #> 5        SNP5      BB      AA      AA #> 6        SNP6      AB      AB      BB"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"converting-genotypes-to-alleles","dir":"Articles","previous_headings":"","what":"Converting Genotypes to Alleles","title":"introduction-to-SNPutils","text":"main function genotype2allele() converts numeric genotype codes allele pairs: genotype2allele() function returns list two components: validation: Contains validation results rule violations results: Contains converted genotype data Let’s examine conversion results: genotype, function created allele_genotype showing actual nucleotide alleles.","code":"# Convert genotypes to alleles results <- genotype2allele(example_genotypes, example_annotations) #> No rule violations found - all rules are respected.  # View the structure of the results str(results) #> List of 2 #>  $ validation:List of 2 #>   ..$ allele_validation: tibble [20 × 12] (S3: tbl_df/tbl/data.frame) #>   .. ..$ probeset_id : chr [1:20] \"SNP1\" \"SNP10\" \"SNP11\" \"SNP12\" ... #>   .. ..$ allele_a    : chr [1:20] \"T\" \"T\" \"-\" \"-\" ... #>   .. ..$ allele_b    : chr [1:20] \"G\" \"C\" \"A\" \"G\" ... #>   .. ..$ is_indel    : logi [1:20] FALSE FALSE TRUE TRUE TRUE TRUE ... #>   .. ..$ is_multibase: logi [1:20] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   .. ..$ is_AT_SNP   : logi [1:20] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   .. ..$ is_CG_SNP   : logi [1:20] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   .. ..$ is_other_SNP: logi [1:20] TRUE TRUE FALSE FALSE FALSE FALSE ... #>   .. ..$ rule2_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   .. ..$ rule3_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   .. ..$ rule4_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   .. ..$ rule5_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..$ rule_violations  : tibble [0 × 13] (S3: tbl_df/tbl/data.frame) #>   .. ..$ probeset_id : chr(0)  #>   .. ..$ allele_a    : chr(0)  #>   .. ..$ allele_b    : chr(0)  #>   .. ..$ is_indel    : logi(0)  #>   .. ..$ is_multibase: logi(0)  #>   .. ..$ is_AT_SNP   : logi(0)  #>   .. ..$ is_CG_SNP   : logi(0)  #>   .. ..$ is_other_SNP: logi(0)  #>   .. ..$ rule2_check : logi(0)  #>   .. ..$ rule3_check : logi(0)  #>   .. ..$ rule4_check : logi(0)  #>   .. ..$ rule5_check : logi(0)  #>   .. ..$ violations  : chr(0)  #>  $ results   :Classes 'data.table' and 'data.frame': 60 obs. of  3 variables: #>   ..$ probeset_id    : chr [1:60] \"SNP1\" \"SNP1\" \"SNP1\" \"SNP10\" ... #>   ..$ Sample_ID      : chr [1:60] \"Sample1\" \"Sample2\" \"Sample3\" \"Sample1\" ... #>   ..$ allele_genotype: chr [1:60] \"T/T\" \"G/G\" \"G/G\" \"T/T\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr> # Look at the first few rows of the results head(results$results) #>    probeset_id Sample_ID allele_genotype #>         <char>    <char>          <char> #> 1:        SNP1   Sample1             T/T #> 2:        SNP1   Sample2             G/G #> 3:        SNP1   Sample3             G/G #> 4:       SNP10   Sample1             T/T #> 5:       SNP10   Sample2             T/C #> 6:       SNP10   Sample3             C/C str(results) #> List of 2 #>  $ validation:List of 2 #>   ..$ allele_validation: tibble [20 × 12] (S3: tbl_df/tbl/data.frame) #>   .. ..$ probeset_id : chr [1:20] \"SNP1\" \"SNP10\" \"SNP11\" \"SNP12\" ... #>   .. ..$ allele_a    : chr [1:20] \"T\" \"T\" \"-\" \"-\" ... #>   .. ..$ allele_b    : chr [1:20] \"G\" \"C\" \"A\" \"G\" ... #>   .. ..$ is_indel    : logi [1:20] FALSE FALSE TRUE TRUE TRUE TRUE ... #>   .. ..$ is_multibase: logi [1:20] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   .. ..$ is_AT_SNP   : logi [1:20] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   .. ..$ is_CG_SNP   : logi [1:20] FALSE FALSE FALSE FALSE FALSE FALSE ... #>   .. ..$ is_other_SNP: logi [1:20] TRUE TRUE FALSE FALSE FALSE FALSE ... #>   .. ..$ rule2_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   .. ..$ rule3_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   .. ..$ rule4_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   .. ..$ rule5_check : logi [1:20] TRUE TRUE TRUE TRUE TRUE TRUE ... #>   ..$ rule_violations  : tibble [0 × 13] (S3: tbl_df/tbl/data.frame) #>   .. ..$ probeset_id : chr(0)  #>   .. ..$ allele_a    : chr(0)  #>   .. ..$ allele_b    : chr(0)  #>   .. ..$ is_indel    : logi(0)  #>   .. ..$ is_multibase: logi(0)  #>   .. ..$ is_AT_SNP   : logi(0)  #>   .. ..$ is_CG_SNP   : logi(0)  #>   .. ..$ is_other_SNP: logi(0)  #>   .. ..$ rule2_check : logi(0)  #>   .. ..$ rule3_check : logi(0)  #>   .. ..$ rule4_check : logi(0)  #>   .. ..$ rule5_check : logi(0)  #>   .. ..$ violations  : chr(0)  #>  $ results   :Classes 'data.table' and 'data.frame': 60 obs. of  3 variables: #>   ..$ probeset_id    : chr [1:60] \"SNP1\" \"SNP1\" \"SNP1\" \"SNP10\" ... #>   ..$ Sample_ID      : chr [1:60] \"Sample1\" \"Sample2\" \"Sample3\" \"Sample1\" ... #>   ..$ allele_genotype: chr [1:60] \"T/T\" \"G/G\" \"G/G\" \"T/T\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"validating-allele-assignments","dir":"Articles","previous_headings":"","what":"Validating Allele Assignments","title":"introduction-to-SNPutils","text":"SNPutils automatically validates allele assignments according standard rules: Rule 1: SNPs fixed forward strand design-time reference genome Rule 2: /CG SNPs, alleles alphabetical order Rule 3: SNPs, Allele.T, Allele.B C G Rule 4: indels, Allele.B deletion marker Rule 5: multi-base alleles, alleles alphabetical order Let’s check validation issues found:","code":"# Check for validation issues if (!is.null(results$validation$rule_violations) && nrow(results$validation$rule_violations) > 0) {   head(results$validation$rule_violations) } else {   cat(\"No validation issues found\\n\") } #> No validation issues found"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"updated-function-genotype2allelev2","dir":"Articles","previous_headings":"Validating Allele Assignments","what":"Updated function: genotype2allelev2()","title":"introduction-to-SNPutils","text":"package also includes updated version additional features: Key improvements v2: - Space--dash conversion alleles - Missing genotype handling (-1 → “–”) - Extended indel detection multi-character alleles - Improved validation error handling Let’s examine conversion results: genotype, function created allele_genotype showing actual nucleotide alleles.","code":"# Convert genotypes to alleles using enhanced function results_v2 <- genotype2allelev2(example_genotypes, example_annotations, verbose = FALSE)  # View the structure of the results str(results_v2, max.level = 2) #> List of 2 #>  $ validation:List of 2 #>   ..$ allele_validation: tibble [20 × 12] (S3: tbl_df/tbl/data.frame) #>   ..$ rule_violations  : tibble [0 × 13] (S3: tbl_df/tbl/data.frame) #>  $ results   :Classes 'data.table' and 'data.frame': 60 obs. of  3 variables: #>   ..$ probeset_id    : chr [1:60] \"SNP1\" \"SNP1\" \"SNP1\" \"SNP10\" ... #>   ..$ Sample_ID      : chr [1:60] \"Sample1\" \"Sample2\" \"Sample3\" \"Sample1\" ... #>   ..$ allele_genotype: chr [1:60] \"T/T\" \"G/G\" \"G/G\" \"T/T\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr> # Look at the first few rows of the results (using v2) head(results_v2$results) #>    probeset_id Sample_ID allele_genotype #>         <char>    <char>          <char> #> 1:        SNP1   Sample1             T/T #> 2:        SNP1   Sample2             G/G #> 3:        SNP1   Sample3             G/G #> 4:       SNP10   Sample1             T/T #> 5:       SNP10   Sample2             T/C #> 6:       SNP10   Sample3             C/C"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"validating-allele-assignments-1","dir":"Articles","previous_headings":"Validating Allele Assignments","what":"Validating Allele Assignments","title":"introduction-to-SNPutils","text":"SNPutils automatically validates allele assignments according standard rules: Rule 1: SNPs fixed forward strand design-time reference genome Rule 2: /CG SNPs, alleles alphabetical order Rule 3: SNPs, Allele.T, Allele.B C G Rule 4: indels, Allele.B deletion marker Rule 5: multi-base alleles, alleles alphabetical order Let’s check validation issues found:","code":"# Check for validation issues if (!is.null(results_v2$validation$rule_violations) &&     nrow(results_v2$validation$rule_violations) > 0) {   head(results_v2$validation$rule_violations) } else {   cat(\"No validation issues found\\n\") } #> No validation issues found"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"converting-to-typ-format","dir":"Articles","previous_headings":"","what":"Converting to TYP Format","title":"introduction-to-SNPutils","text":"allele2typ() function converts results TYP format: NOTE: ’s TYP format missing header (Pre-TYP) TYP format includes: Sample_ID: Sample identifier SNP_Name: SNP identifier Allele1_Forward Allele2_Forward: two alleles","code":"# Convert to TYP format typ_format <- allele2typ(results)  # View the TYP format data head(typ_format) #>    Sample_ID SNP_Name Allele1_Forward Allele2_Forward #>       <char>   <char>          <char>          <char> #> 1:   Sample1     SNP1               T               T #> 2:   Sample2     SNP1               G               G #> 3:   Sample3     SNP1               G               G #> 4:   Sample1    SNP10               T               T #> 5:   Sample2    SNP10               T               C #> 6:   Sample3    SNP10               C               C"},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"missing-genotypes","dir":"Articles","previous_headings":"Handling Special Cases","what":"Missing Genotypes","title":"introduction-to-SNPutils","text":"enhanced function handles missing genotypes (-1) gracefully:","code":"# Create test data with missing genotype test_genotypes <- data.frame(   probeset_id = \"SNP1\",   Sample1 = -1 )  test_annotations <- data.frame(   Probe.Set.ID = \"SNP1\",   Chromosome = \"1\",   Physical.Position = 1000,   Allele.A = \"A\",   Allele.B = \"G\" )  # Convert with missing genotype result_missing <- genotype2allelev2(test_genotypes, test_annotations, verbose = FALSE) result_missing$results #>    probeset_id Sample_ID allele_genotype #>         <char>    <char>          <char> #> 1:        SNP1   Sample1               -"},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"handling-indels","dir":"Articles","previous_headings":"","what":"Handling Indels","title":"introduction-to-SNPutils","text":"Let’s focus SNPutils handles indels: indels, genotype codes interpreted : 0: D/D (homozygous deletion) 1: D/(heterozygous deletion/insertion) 2: /(homozygous insertion)","code":"# Filter for indels (SNP11-SNP20 in our example data) indel_results <- subset(results$results, grepl(\"SNP1[1-9]|SNP20\", probeset_id)) head(indel_results) #>    probeset_id Sample_ID allele_genotype #>         <char>    <char>          <char> #> 1:       SNP11   Sample1             D/D #> 2:       SNP11   Sample2             I/I #> 3:       SNP11   Sample3             D/D #> 4:       SNP12   Sample1             D/I #> 5:       SNP12   Sample2             D/D #> 6:       SNP12   Sample3             D/I # Filter for indels (SNP11-SNP20 in our example data) indel_results <- subset(results_v2$results, grepl(\"SNP1[1-9]|SNP20\", probeset_id)) head(indel_results) #>    probeset_id Sample_ID allele_genotype #>         <char>    <char>          <char> #> 1:       SNP11   Sample1             D/D #> 2:       SNP11   Sample2             I/I #> 3:       SNP11   Sample3             D/D #> 4:       SNP12   Sample1             D/I #> 5:       SNP12   Sample2             D/D #> 6:       SNP12   Sample3             D/I"},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/articles/introduction-to-SNPutils.html","id":"working-with-your-own-data","dir":"Articles","previous_headings":"","what":"Working with Your Own Data","title":"introduction-to-SNPutils","text":"use SNPutils data, follow steps: Read Genotype Data Use readr::read_delim() similar read genotype data, especially need skip header lines: Check Prepare Data Ensure data required column names: Process Data Convert genotypes alleles: Using updated function genotype2allelev2(): Save Results Write results file:","code":"# Read genotype data genotype_data <- read_delim(   \"path/to/genotype.txt\",   delim = \"\\t\",   skip = 583,  # Adjust based on your file structure   col_names = TRUE )  # Read annotation data annotation_data <- read.table(   \"path/to/annotation.csv\",   header = TRUE,   sep = \",\" ) # For genotype data, ensure there's a column named \"probeset_id\" if (!\"probeset_id\" %in% colnames(genotype_data)) {   # Rename the appropriate column   genotype_data <- rename(genotype_data, probeset_id = your_id_column_name) }  # For annotation data, ensure there are columns named \"Probe.Set.ID\", \"Allele.A\", and \"Allele.B\" required_cols <- c(\"Probe.Set.ID\", \"Allele.A\", \"Allele.B\") missing_cols <- required_cols[!required_cols %in% colnames(annotation_data)] if (length(missing_cols) > 0) {   stop(\"Required columns missing from annotation data: \",        paste(missing_cols, collapse = \", \")) } # Convert genotypes to alleles results <- genotype2allele(genotype_data, annotation_data)  # Check for validation issues if (nrow(results$validation$rule_violations) > 0) {   print(paste(\"Found\", nrow(results$validation$rule_violations), \"validation issues\"))   head(results$validation$rule_violations) }  # Convert to TYP format typ_format <- allele2typ(results) # Convert genotypes to alleles using enhanced function results <- genotype2allelev2(genotype_data, annotation_data)  # Check for validation issues if (nrow(results$validation$rule_violations) > 0) {   print(paste(\"Found\", nrow(results$validation$rule_violations), \"validation issues\"))   head(results$validation$rule_violations) }  # Convert to TYP format typ_format <- allele2typ(results) # Write TYP format to a file write.csv(typ_format, \"output_typ.csv\", row.names = FALSE)"},{"path":"https://labeofd.github.io/SNPutils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hedia Tnani. Author, maintainer.","code":""},{"path":"https://labeofd.github.io/SNPutils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tnani H (2025). SNPutils: Convert Genotype Data Allele Formats Generate Summary Statistics. R package version 0.1.0, https://github.com/LabeoFD/SNPutils.","code":"@Manual{,   title = {SNPutils: Convert Genotype Data to Allele Formats and Generate Summary Statistics},   author = {Hedia Tnani},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/LabeoFD/SNPutils}, }"},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Convert Genotype Data to Allele Formats and Generate Summary Statistics","text":"SNPutils provides tools converting numerical genotype data (0, 1, 2) allele pairs (e.g., “/G”). package streamlines genetic data processing workflows : Translating genotype codes biologically meaningful alleles Supporting standard validation rules SNP data Handling standard SNPs indels (insertions/deletions) Generating TYP format output downstream analysis","code":""},{"path":"https://labeofd.github.io/SNPutils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Convert Genotype Data to Allele Formats and Generate Summary Statistics","text":"can install SNPutils GitHub:","code":"# Install from GitHub # install.packages(\"remotes\") remotes::install_github(\"LabeoFD/SNPutils\")"},{"path":"https://labeofd.github.io/SNPutils/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Convert Genotype Data to Allele Formats and Generate Summary Statistics","text":"","code":"library(SNPutils)  # Load example data data(example_genotypes) data(example_annotations)  # Basic workflow results <- genotype2allele(example_genotypes, example_annotations) typ_output <- allele2typ(results)  # Check the first few results head(typ_output)"},{"path":"https://labeofd.github.io/SNPutils/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Convert Genotype Data to Allele Formats and Generate Summary Statistics","text":"Efficient conversion: Transform numerical codes nucleotide pairs Data validation: Apply standard genetic rules ensure data quality Indel support: Correctly handle insertions deletions Formatted output: Generate standardized TYP format files","code":""},{"path":"https://labeofd.github.io/SNPutils/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Convert Genotype Data to Allele Formats and Generate Summary Statistics","text":"use SNPutils research, please cite : LabeoFD (2025). SNPutils: Tools Converting Numerical Genotype Data Allele Pairs. R package.","code":""},{"path":"https://labeofd.github.io/SNPutils/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Convert Genotype Data to Allele Formats and Generate Summary Statistics","text":"package free open source software, licensed GPL-3.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/SNPutils-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SNPutils: Convert Genotype Data to Allele Formats and Generate Summary Statistics — SNPutils-package","title":"SNPutils: Convert Genotype Data to Allele Formats and Generate Summary Statistics — SNPutils-package","text":"Tools converting numerical genotype data (0, 1, 2) allele pairs, generating TYP COM file formats, validating allele assignments, calculating sample variant summary statistics.","code":""},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/reference/SNPutils-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SNPutils: Convert Genotype Data to Allele Formats and Generate Summary Statistics — SNPutils-package","text":"Maintainer: Hedia Tnani hediatnani0@gmail.com (ORCID)","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/allele2typ.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Results to TYP Format — allele2typ","title":"Convert Results to TYP Format — allele2typ","text":"Converts genotype results genotype2allele() TYP format, provides structured representation forward alleles.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/allele2typ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Results to TYP Format — allele2typ","text":"","code":"allele2typ(conversion_results)"},{"path":"https://labeofd.github.io/SNPutils/reference/allele2typ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Results to TYP Format — allele2typ","text":"conversion_results Results genotype2allele()","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/allele2typ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Results to TYP Format — allele2typ","text":"data frame TYP format Sample_ID, SNP_Name, Allele1_Forward, Allele2_Forward columns","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/allele2typ.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Results to TYP Format — allele2typ","text":"","code":"if (FALSE) { # \\dontrun{ results <- genotype2allele(genotype_data, annotation_data) typ_data <- allele2typ(results) } # }"},{"path":"https://labeofd.github.io/SNPutils/reference/create_com_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create COM File from Axiom GT Report — create_com_file","title":"Create COM File from Axiom GT Report — create_com_file","text":"Reads processes Axiom GT report file, extracting date information sample call rate data quality comments pass/fail status.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/create_com_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create COM File from Axiom GT Report — create_com_file","text":"","code":"create_com_file(   file_path,   call_rate_threshold = 0.95,   save_file = TRUE,   output_dir = \"Documents/TYP-COM\",   save_log = TRUE )"},{"path":"https://labeofd.github.io/SNPutils/reference/create_com_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create COM File from Axiom GT Report — create_com_file","text":"file_path Character string. Path AxiomGT report file (.txt) call_rate_threshold Numeric. Threshold call rate quality (default: 0.95) save_file Logical. Whether save COM file PASS samples (default: TRUE) output_dir Character string. Output directory (default: \"Documents/TYPE\") save_log Logical. Whether save processing log file (default: TRUE)","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/create_com_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create COM File from Axiom GT Report — create_com_file","text":"tibble containing processed sample data","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/create_com_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create COM File from Axiom GT Report — create_com_file","text":"","code":"if (FALSE) { # \\dontrun{ result <- create_com_file(\"path/to/AxiomGT1.report.txt\") result <- create_com_file(\"file.txt\", call_rate_threshold = 0.98, save_file = FALSE) } # }"},{"path":"https://labeofd.github.io/SNPutils/reference/example_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Annotation Data — example_annotations","title":"Example Annotation Data — example_annotations","text":"dataset containing annotation information 20 SNPs, including 10 regular SNPs 10 indels. data provides genomic positions allele information.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Annotation Data — example_annotations","text":"","code":"example_annotations"},{"path":"https://labeofd.github.io/SNPutils/reference/example_annotations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Annotation Data — example_annotations","text":"data frame 20 rows 5 columns: Probe.Set.ID Character. SNP identifier matching probeset_id Chromosome Character. Chromosome location (1-22, X) Physical.Position Integer. Base pair position chromosome Allele.Character. First allele (deletion marker \"-\" indels) Allele.B Character. Second allele (insertion sequence indels)","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_annotations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Annotation Data — example_annotations","text":"standard SNPs (SNP1-SNP10): Allele.Allele.B contain single nucleotides. indels (SNP11-SNP20): Allele.contains \"-\" Allele.B contains insertion sequence.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_annotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Annotation Data — example_annotations","text":"","code":"data(example_annotations) head(example_annotations) #>   Probe.Set.ID Chromosome Physical.Position Allele.A Allele.B #> 1         SNP1          9          35958693        T        G #> 2         SNP2         11          61564642        A        C #> 3         SNP3         19          99793111        A        C #> 4         SNP4         14          22319761        T        G #> 5         SNP5         16          41066538        A        G #> 6         SNP6         13          20182616        T        C # Check for indels sum(example_annotations$Allele.A == \"-\") #> [1] 10"},{"path":"https://labeofd.github.io/SNPutils/reference/example_axiom_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Axiom Report Data — example_axiom_report","title":"Example Axiom Report Data — example_axiom_report","text":"list containing example Axiom genotyping report data header information quality metrics Axiom genotyping platform.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_axiom_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Axiom Report Data — example_axiom_report","text":"","code":"example_axiom_report"},{"path":"https://labeofd.github.io/SNPutils/reference/example_axiom_report.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Axiom Report Data — example_axiom_report","text":"list 2 elements: header Character vector 9 elements containing metadata including chip type, library set information, processing parameters, timestamps data Data frame 15 rows 4 variables: cel_files: Character. CEL file names total_call_rate: Numeric. Percentage successful genotype calls average_heterozygosity: Numeric. Average heterozygosity rate median_intensity: Numeric. Median signal intensity","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_axiom_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Axiom Report Data — example_axiom_report","text":"","code":"data(example_axiom_report) example_axiom_report$header #> [1] \"#%chip_type=Axiom_GW_Hu_SNP\"                                    #> [2] \"#%lib_set_name=Axiom_GW_Hu_SNP.r2\"                              #> [3] \"#%lib_set_version=r2\"                                           #> [4] \"#%affymetrix-algorithm-param-apt-time-str=May 23 14:30:45 2025\" #> [5] \"#%create_date=2024-01-15T10:30:45Z\"                             #> [6] \"#%guid=1234567890abcdef\"                                        #> [7] \"#%program_name=apt-probeset-genotype\"                           #> [8] \"#%program_version=1.21.0\"                                       #> [9] \"#%program_company=Affymetrix\"                                   head(example_axiom_report$data) #>        cel_files total_call_rate average_heterozygosity median_intensity #> 1 Sample_001.CEL            97.5                  0.230             2150 #> 2 Sample_002.CEL            94.2                  0.285             1890 #> 3 Sample_003.CEL            98.1                  0.215             2340 #> 4 Sample_004.CEL            96.8                  0.250             2100 #> 5 Sample_005.CEL            93.5                  0.305             1750 #> 6 Sample_006.CEL            99.2                  0.220             2500 summary(example_axiom_report$data$total_call_rate) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   92.10   94.50   96.30   96.05   97.70   99.20"},{"path":"https://labeofd.github.io/SNPutils/reference/example_genotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Genotype Data — example_genotypes","title":"Example Genotype Data — example_genotypes","text":"dataset containing example genotype data 20 SNPs, including 10 indels. data shows genotype calls multiple samples using numeric encoding (0, 1, 2).","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_genotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Genotype Data — example_genotypes","text":"","code":"example_genotypes"},{"path":"https://labeofd.github.io/SNPutils/reference/example_genotypes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Genotype Data — example_genotypes","text":"data frame 20 rows 4 columns: probeset_id Character. SNP identifier (SNP1 SNP20) Sample1 Numeric. Genotype codes (0, 1, 2) Sample1 Sample2 Numeric. Genotype codes (0, 1, 2) Sample2 Sample3 Numeric. Genotype codes (0, 1, 2) Sample3","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_genotypes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Genotype Data — example_genotypes","text":"Genotype encoding: 0 = homozygous reference, 1 = heterozygous, 2 = homozygous alternative. indels (SNP11-SNP20): 0 = D/D, 1 = D/, 2 = /.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/example_genotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Genotype Data — example_genotypes","text":"","code":"data(example_genotypes) head(example_genotypes) #>   probeset_id Sample1 Sample2 Sample3 #> 1        SNP1       0       2       2 #> 2        SNP2       0       1       1 #> 3        SNP3       1       1       0 #> 4        SNP4       1       0       2 #> 5        SNP5       2       0       0 #> 6        SNP6       1       1       2 table(example_genotypes$Sample1) #>  #>  0  1  2  #>  7 10  3"},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allele.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Genotype Data to Allele Pairs — genotype2allele","title":"Convert Genotype Data to Allele Pairs — genotype2allele","text":"Converts numerical genotype data (0, 1, 2) actual allele pairs using annotation data.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allele.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Genotype Data to Allele Pairs — genotype2allele","text":"","code":"genotype2allele(   genotype_data,   annotation_data,   validate_alleles = TRUE,   verbose = TRUE )"},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allele.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Genotype Data to Allele Pairs — genotype2allele","text":"genotype_data data frame containing genotype data probeset_id column annotation_data data frame containing annotation data Probe.Set.ID, Allele., Allele.B columns validate_alleles Logical indicating whether validate allele assignments verbose Logical indicating whether print validation results","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allele.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Genotype Data to Allele Pairs — genotype2allele","text":"list containing validation results, converted genotypes","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allele.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Genotype Data to Allele Pairs — genotype2allele","text":"","code":"if (FALSE) { # \\dontrun{ results <- genotype2allele(genotype_data, annotation_data) } # }"},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allelev2.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","title":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","text":"Converts numerical genotype data (0, 1, 2) actual allele pairs using annotation data. enhanced version includes improved validation better handling special cases like missing genotypes multi-character alleles.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allelev2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","text":"","code":"genotype2allelev2(   genotype_data,   annotation_data,   validate_alleles = TRUE,   verbose = TRUE )"},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allelev2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","text":"genotype_data data frame containing genotype data probeset_id column annotation_data data frame containing annotation data Probe.Set.ID, Allele., Allele.B columns validate_alleles Logical indicating whether validate allele assignments (default: TRUE) verbose Logical indicating whether print validation results (default: TRUE)","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allelev2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","text":"list containing validation results converted genotypes","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allelev2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","text":"enhanced version provides: Space--dash conversion alleles Handling missing genotypes (-1 -> \"-\") Extended indel detection multi-character alleles Improved validation error handling","code":""},{"path":[]},{"path":"https://labeofd.github.io/SNPutils/reference/genotype2allelev2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Genotype Data to Allele Pairs (Version 2) — genotype2allelev2","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage results <- genotype2allelev2(genotype_data, annotation_data)  # Silent mode results <- genotype2allelev2(genotype_data, annotation_data, verbose = FALSE) } # }"},{"path":"https://labeofd.github.io/SNPutils/reference/recode_genotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Numeric Genotype Data to Character Labels — recode_genotypes","title":"Recode Numeric Genotype Data to Character Labels — recode_genotypes","text":"function converts numeric genotype codes corresponding character labels: -1 -> \"NoCall\", 0 -> \"AA\", 1 -> \"AB\", 2 -> \"BB\"","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/recode_genotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Numeric Genotype Data to Character Labels — recode_genotypes","text":"","code":"recode_genotypes(genotype_data, id_column = \"probeset_id\")"},{"path":"https://labeofd.github.io/SNPutils/reference/recode_genotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Numeric Genotype Data to Character Labels — recode_genotypes","text":"genotype_data data frame containing genotype data probeset_id column numeric genotype columns coded -1, 0, 1, 2 id_column Character string specifying name ID column exclude recoding (default: \"probeset_id\")","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/recode_genotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Numeric Genotype Data to Character Labels — recode_genotypes","text":"data frame structure input, numeric genotype values recoded character labels","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/recode_genotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Numeric Genotype Data to Character Labels — recode_genotypes","text":"","code":"# Create sample data sample_data <- data.frame(   probeset_id = c(\"SNP1\", \"SNP2\", \"SNP3\"),   sample1 = c(-1, 0, 1),   sample2 = c(0, 1, 2),   sample3 = c(2, -1, 0) )  # Recode genotypes recoded_data <- recode_genotypes(sample_data) print(recoded_data) #>   probeset_id sample1 sample2 sample3 #> 1        SNP1  NoCall      AA      BB #> 2        SNP2      AA      AB  NoCall #> 3        SNP3      AB      BB      AA"},{"path":"https://labeofd.github.io/SNPutils/reference/validateAlleles.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Allele Assignments — validateAlleles","title":"Validate Allele Assignments — validateAlleles","text":"Validates allele assignments according standard rules genetic data.","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/validateAlleles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Allele Assignments — validateAlleles","text":"","code":"validateAlleles(allele_lookup, verbose = TRUE)"},{"path":"https://labeofd.github.io/SNPutils/reference/validateAlleles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Allele Assignments — validateAlleles","text":"allele_lookup data frame probeset_id, allele_a, allele_b columns verbose Logical indicating whether print validation results","code":""},{"path":"https://labeofd.github.io/SNPutils/reference/validateAlleles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Allele Assignments — validateAlleles","text":"list containing validation information rule violations","code":""}]
